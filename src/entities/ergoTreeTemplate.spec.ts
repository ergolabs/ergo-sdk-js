import test from "ava"
import {RustModule} from "../utils/rustLoader"
import {treeTemplateFromErgoTree} from "./ergoTreeTemplate"

test.before(async () => {
  await RustModule.load(true)
})

test("ErgoTreeTemplate from ErgoTree (MinerProp tree V0)", async t =>
  t.deepEqual(
    treeTemplateFromErgoTree(
      "1005040004000e36100204a00b08cd0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ea02d192a39a8cc7a701730073011001020402d19683030193a38cc7b2a57300000193c2b2a57301007473027303830108cdeeac93b1a57304"
    ),
    "d19683030193a38cc7b2a57300000193c2b2a57301007473027303830108cdeeac93b1a57304"
  ))

test("ErgoTreeTemplate from ErgoTree (Simple tree V0)", async t =>
  t.deepEqual(
    treeTemplateFromErgoTree("0008cd03685e5b930df266e9f84ee860c2dac45960014638baa32ad51ac160d335377c18"),
    "08cd03685e5b930df266e9f84ee860c2dac45960014638baa32ad51ac160d335377c18"
  ))

test("ErgoTreeTemplate from ErgoTree (Pool tree V0)", async t =>
  t.deepEqual(
    treeTemplateFromErgoTree(
      "100f0400040204020404040404060406058080a0f6f4acdbe01b058080a0f6f4acdbe01b050004d00f0400040005000500d81ad601b2a5730000d602e4c6a70405d603db63087201d604db6308a7d605b27203730100d606b27204730200d607b27203730300d608b27204730400d609b27203730500d60ab27204730600d60b9973078c720602d60c999973088c720502720bd60d8c720802d60e998c720702720dd60f91720e7309d6108c720a02d6117e721006d6127e720e06d613998c7209027210d6147e720d06d615730ad6167e721306d6177e720c06d6187e720b06d6199c72127218d61a9c72167218d1edededededed93c27201c2a793e4c672010405720292c17201c1a793b27203730b00b27204730c00938c7205018c720601ed938c7207018c720801938c7209018c720a019593720c730d95720f929c9c721172127e7202069c7ef07213069a9c72147e7215067e9c720e720206929c9c721472167e7202069c7ef0720e069a9c72117e7215067e9c721372020695ed720f917213730e907217a19d721972149d721a7211ed9272199c7217721492721a9c72177211"
    ),
    "d81ad601b2a5730000d602e4c6a70405d603db63087201d604db6308a7d605b27203730100d606b27204730200d607b27203730300d608b27204730400d609b27203730500d60ab27204730600d60b9973078c720602d60c999973088c720502720bd60d8c720802d60e998c720702720dd60f91720e7309d6108c720a02d6117e721006d6127e720e06d613998c7209027210d6147e720d06d615730ad6167e721306d6177e720c06d6187e720b06d6199c72127218d61a9c72167218d1edededededed93c27201c2a793e4c672010405720292c17201c1a793b27203730b00b27204730c00938c7205018c720601ed938c7207018c720801938c7209018c720a019593720c730d95720f929c9c721172127e7202069c7ef07213069a9c72147e7215067e9c720e720206929c9c721472167e7202069c7ef0720e069a9c72117e7215067e9c721372020695ed720f917213730e907217a19d721972149d721a7211ed9272199c7217721492721a9c72177211"
  ))
